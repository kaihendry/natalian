[[!meta title="Databases are painful"]]
[[!meta description="I am not sure how to think when it comes to databases"]]

Guess I have been fairly fortunate in my career by avoiding the **complexity
of databases**. I've always generally used flat files, increasingly stored
as JSON (NoSQL?) and built my only little <abbr title="Create, Read, Update, Delete">CRUD</abbr> functions to use them. Of course
I also have been careful to structure my data paths `/user/name/2019/` and
perhaps cheated a little bit with symlinks `/2019/user/name/` from time to time.

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Bad analogy.<br><br>Relational databases are almost always the right tool for a data storage job. If you&#39;re going to use something else you had better have a really confident reason for doing so.<br><br>Anticipating multiple terrabytes of unstructured log data for example.</p>&mdash; Simon Willison (@simonw) <a href="https://twitter.com/simonw/status/1089554065342648320?ref_src=twsrc%5Etfw">January 27, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

# Pain point #1 - treating a <abbr title="Relational Database Management System">RDMS</abbr> like a shared database

I always imagined a database as a shared resource like [12 factor
App](https://12factor.net/backing-services). Several competing microservices
interacting with the data. Now I've come to know of [Service Orientated
Architecture](https://stackoverflow.com/a/8161759) where the Application and
Database are tightly coupled. Now I cannot access the company's data store
without going through a primitive RestFUL API.

<blockquote>
<strong>A service should own its own data and associated operations</strong> since only the
Application knows the intent of the actions being performed on that data.
</blockquote>

My thought: Microservices needing canonical data via a RestFUL interface will suck imo.

# Pain point #2 - Where does the business logic go again?

I agree that code can probably model _intent_ the best, though perhaps a [DBA](https://en.wikipedia.org/wiki/Database_administrator) would disagree?

When I see SQL features like:
* [referential Actions on foreign keys](https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html) e.g. cascade delete related records when a pivotal record is deleted
* procedures
* triggers
* good old fashion relationship modelling

I'm often left thinking, what should be in the code and what should be in the
database schema? Should code just be CRUD? Should code dictate the data
structure and the database is just a store?

Truth is that sometimes it's a mix, i.e. a real mess. Take deletions for
example. If I delete a Unit, don't you think it's related data should also be
removed? This can be modelled in SQL with a "cascade delete". Or maybe the
record should be deleted at all for compliance reasons?

My thought: If basic logic could be modelled in the database, might them be
better for microservices consuming the data?  It was so easy when you could
just model your data structure in a struct and just dump to a data store.

# Pain point #3 - How do I iterate out of this mess?

	it's always best to design properly to begin with

I believe you iterate towards the solution. You can't possibly design right
from the start. However what you can do, is make sure your development
iterations are short and that you can migrate / update your system painlessly
... to reach a better design.

I'm totally confounded by the complexity of schema updates. Outside Rail's rake
migrate, this really hard to do confidently. I've yet to find a good Golang
based solution.

Things like an [online schema
change](https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html)
without down time, seems like a black art.

My thought: Am I missing some tools or reading matter to help me manage a [complex database schema like Bugzilla's?](https://github.com/unee-t/bz-database)

# Pain point #4 - Tooling and managed services

	error=Error 1062: Duplicate entry '32767' for key 'PRIMARY'

How do you check a table is full or about to be full? Write your own tools!?!

Databases have been around for about 45 years, almost as long as Unix, and I'm
just confounded on how bad the tooling is. Nevermind the [gotchas of using the
Golang client driver](http://go-database-sql.org/surprises.html). Perhaps I
need to familiarise myself with the [Percona
toolkit](https://www.percona.com/software/database-tools/percona-toolkit). Gosh
things are complex. It feels extra stressful when pretty much all the business
value is inside it.

Does a DBA design or administer? I'm saddled with maintaining AWS RDS.. With
it's hundreds of parameters and it caveats regarding how they applied, I've had
to [write a tool](https://github.com/unee-t/dbcheck), just to cope with a
"managed" RDMS solution.
