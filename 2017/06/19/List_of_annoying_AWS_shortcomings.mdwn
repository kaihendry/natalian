[[!meta title="AWS annoyances"]]
[[!meta description="List of issues I have was Amazon Web Services currently"]]

AWS is the very best Cloud platform out there, but that mean I can't whine, right?

<img src="https://s.natalian.org/2017-06-29/AmazonWebservices_Logo.svg" alt="Amazon Web services logo">

1. Unpredictable region roll out. When will Singapore get AWS Batch for e.g.?

1. Wrapping your head around regions first... how some things like ACM only
   seems to work in us-east-1. $SERVICE/$REGION might have been a better structure.

1. Autoscaling and load balancer seem poorly connected, no CloudWatch Per Autoscaling Group

1. No way to track [memory exhaustion](https://twitter.com/kaihendry/status/876657690780598272) .. I have found [AWS mon-scripts](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mon-scripts.html) but I wish it was easier than this...

1. [Launch time != Uptime](https://twitter.com/kaihendry/status/876658250485248000)

	Launch = day 0
	Uptime = continuous availability since last OS restart

1. You can't seem to query CloudWatch metrics by tag

1. Amazon Linux doesn't support [SystemD](https://en.wikipedia.org/wiki/Systemd)

1. Amazon Linux only updates on boot, so you must plan to rotate out your service.

1. Cloud Formation lag, making it difficult to orchestrate stuff. By the time it
   does come available, you've long forgotten about your manual process.

1. DynamoDB throughput exceeded... this happens even on autoscaled managed instances in my experience!

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">My DynamoDB <a href="https://twitter.com/hashtag/awswishlist?src=hash">#awswishlist</a><br>1. filter THEN limit during query/scan<br>2. unique secondary indexes<br>3. no provisioned throughput</p>&mdash; Rich Buggy (@richbuggy) <a href="https://twitter.com/richbuggy/status/880325372092465152">June 29, 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

11. [DynamoDB JSON](https://stackoverflow.com/questions/44535445/unmarshall-dynamodb-json) Why... WHY!?

1. [IAM policies are a total PITA](https://twitter.com/kaihendry/status/857777338632646657). An ongoing
service to tighten IAM policies based on usage is sorely needed.

1. AMIs should be more like Docker images, i.e. infra as code, treated like
   _cattle_. AMI snapshots and **systems manager services** patching seems like treating your infra like _pets_ to me.

1. Redirects in S3 can be quite unreasonably painful. Same goes for setting up CORS. Or cloudfront for that matter. Should be far more streamlined. AWS@Edge will hopefully paste over these cracks.

1. Debugging Lambda is such an **incredible pain** right now. Better Cloudwatch
   integration (error in Lambda? show me the exact log for the corresponding
request id!!!) and at least storing events for replaying would be nice.

1. AWS Marketplace sellers only available to US incorporated business and it is (currently)
   not suited for a range of [solutions on the AWS platform](https://github.com/apex/up/issues/3#issuecomment-311531145)..

1. AWS has a lot of services (code build stuff that rivals github/travis that
   comes to mind) which are probably best left to third parties (at least
properly encourage an ecosystem!) and they should focus on core commodified
services (like a better DynamoDB/S3).

1. I've had a [terrible experience with AWS
   ECS](https://github.com/aws/amazon-ecs-cli/issues/136). Could I be coaxed to
give it another try?
	* Clusters are limited by initial machine type choice
	* Difficult to gauge what the limits are, esp on high load systems
	* The task placement and service abstraction is over engineered. I want to **simply map docker images onto EC2 resources**!!
	* Need to change Dockerfile's port? Prepare to completely redo your service
	* [Slow to deploy](https://twitter.com/kaihendry/status/946741502914342912) versus almost instant Lambda update
